# SQL-HackerRank-Problems

1. Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

The CITY table is described as follows:

Field	          Type
ID	            NUMBER
NAME	          VARCHAR2(17)
COUNTRY CODE	  VARCHAR2(3)
DISTRICT	      VARCHAR2(20)
POPULATION	    NUMBER

Solution:
SELECT * FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 100000;


2. Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

Solution:   SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 120000;

3. Query all columns (attributes) for every row in the CITY table.

Solution:   SELECT * FROM CITY;

4. Query all columns for a city in CITY with the ID 1661.

Solution:   SELECT * FROM CITY WHERE ID = '1661';

5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

Solution:   SELECT * FROM CITY WHERE COUNTRYCODE='JPN'

6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

Solution:   SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN'



###Weather Observation Station 1

1. Query a list of CITY and STATE from STATION.

Input Format

The STATION table is described as follows:

Field	    Type
ID	      NUMBER
CITY	    VARCHAR2(21)
STATE	    VARCHAR2(2)
LAT_N	    NUMBER
LONG_W	  NUMBER

Solution:   SELECT CITY,STATE FROM STATION

2. Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

Solution:   SELECT DISTINCT CITY FROM STATION WHERE ID % 2 = 0;

3. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

Solution:   SELECT COUNT(CITY)-COUNT(DISTINCT CITY) FROM STATION

4. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name).
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
where LAT_N is the northern latitude and LONG_W is the western longitude.

Sample Input:
Let's say that CITY only has four entries: DEF, ABC, PQRS and WXY

Sample Output:
ABC 3
PQRS 4

Explanation:
When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with the respective lengths 3,3,4,3,3,4, and 33. 
The longest-named city is obviously PQRS, but there are 33 options for shortest-named city; we choose ABC, because it comes first alphabetically.

Solution:   SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY), CITY LIMIT 1;
            SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1;
            
5. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

Solution:   SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[A,E,I,O,U]';
Analysis:
query CITY names ==> SELECT CITY
from STATION table ==> FROM STATION
starting with vowels ==> WHERE CITY REGEXP ‘^[A,E,I,O,U]’
cannot contain duplicates ==> SELECT DISTINCT CITY

6. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

Solution:   	
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[A,E,I,O,U]$';
Analysis:
query CITY names ==> SELECT CITY
from STATION table ==> FROM STATION
ending with vowels ==> WHERE CITY REGEXP ‘[aeiou]$’
cannot contain duplicates ==> SELECT DISTINCT CITY

7. Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

Solution:   SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[A,E,I,O,U].*[A,E,I,O,U]$'; 

Explination: The regular expression for city names having vowels as both their first and last characters is ‘^[aeiou].*[aeiou]$’. 
 ‘^[aeiou]’ means first character is one of vowels and ‘[aeiou]$’ means the string ends with vowels.
 ‘.*’ can represent any numbers of any characters.
 
 
8.  Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

Solution:   SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[^A,E,I,O,U]';
Analysis:
query CITY names ==> SELECT CITY
from STATION table ==> FROM STATION
do not start with vowels ==> WHERE CITY REGEXP ‘^[^aeiou]’
do not contain duplicates ==> SELECT DISTINCT CITY

9. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

Solution:   	SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[^aeiou]$';
Analysis:
query CITY names ==> SELECT CITY
from STATION table ==> FROM STATION
do not end with vowels ==> WHERE CITY REGEXP ‘[^aeiou]$’
do not contain duplicates ==> SELECT DISTINCT CITY

10. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

Solution:   SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[^AEIOU]|[^AEIOU]$';
Analysis:
Use regular expressions to filter city names. Regular expression for city names that do not start with vowels is ‘^[^aeiou]’ and 
expression for names do not end with vowels is ‘[^aeiou]$’.
So, the regular expression for this problem is ‘^[^aeiou]|[^aeiou]$’.

11.Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

Solution:   SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[^AEIOU].*[^AEIOU]$'


## Higher Than 75 Marks

1. Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name.
   If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
   
Input Format:
The STUDENTS table is described as follows:

Column	Type
ID	Integer
Name	String
Marks	Integer
The Name column only contains uppercase (A-Z) and lowercase (a-z) letters.

Analysis:
query student names ==> SELECT Name
from STUDENTS table ==> FROM STUDENTS
score higher than 75 Marks ==> WHERE Marks > 75
order output by last three characters of name ==> ORDER BY RIGHT(Name, 3)
secondary sort by ascending ID ==> ORDER BY RIGHT(Name, 3), ID.

Solution:SELECT NAME FROM STUDENTS WHERE MARKS > 75 ORDER BY RIGHT(NAME,3),ID

## Employee Names

1. Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

Input Format:
The Employee table containing employee data for a company is described as follows:

Column	Type
employee_id	Integer
name	String
months	Integer
salary	Integer
where employee_id is an employee’s ID number, name is their name, months is the total number of months they’ve been working for the company,
and salary is their monthly salary.

Solution:   SELECT NAME FROM EMPLOYEE ORDER BY NAME;

2. Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee
having a salary greater than 2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id.

Solution:  SELECT NAME FROM EMPLOYEE WHERE SALARY > 2000 AND MONTHS < 10 ORDER BY EMPLOYEE_ID;

3.  Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, 
but did not realize her keyboard’s 0 key was broken until after completing the calculation. 
She wants your help finding the difference between her miscalculation (using salaries with any zeroes removed), and the actual average salary.

Write a query calculating the amount of error (i.e.: actual - miscalculated average monthly salaries), and round it up to the next integer.

Solution:  SELECT CEIL(AVG(Salary) - AVG(REPLACE(Salary, '0', ''))) FROM EMPLOYEES;
Analysis:
We can use REPLACE() function to solve the problem. The syntax is ‘REPLACE(str, from_str, to_str)’ and
it returns the string str with all occurrences of the string from_str replaced by the string to_str.

actual average monthly salaries ==> AVG(Salary)
salary without zeros ==> REPLACE(Salary, ‘0’, ‘’)
miscalculated average monthly salaries ==> AVG(REPLACE(Salary, ‘0’, ‘’))
difference between actual and miscalculated average salaries ==>
SELECT AVG(Salary) - AVG(REPLACE(Salary, ‘0’, ‘’))
round the difference up to next integer ==>
SELECT CEIL(AVG(Salary) - AVG(REPLACE(Salary, ‘0’, ‘’)))
from EMPLOYEES table ==> FROM EMPLOYEES


## Revising Aggregations - Averages

1.Query the average population of all cities in CITY where District is California.

Input Format
The CITY table is described as follows:

CITY
Field	Type
ID	NUMBER
NAME	VARCHAR2(17)
COUNTRYCODE	VARCHAR2(3)
DISTRICT	VARCHAR2(20)
POPULATION	NUMBER

Solution:   SELECT AVG(POPULATION) FROM CITY WHERE DISTRICT = 'California';

2.  Query the average population for all cities in CITY, rounded down to the nearest integer.

Solution:   SELECT Round(AVG(POPULATION)) FROM CITY;

3.  Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

Solution:   SELECT SUM(POPULATION) FROM CITY WHERE COUNTRYCODE='JPN';

4.  Query the difference between the maximum and minimum populations in CITY.

Solution:   SELECT MAX(POPULATION)-MIN(POPULATION) FROM CITY;

